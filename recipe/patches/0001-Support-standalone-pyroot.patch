From d0f9767d614dd3b2361c434ba6bd97eef051e579 Mon Sep 17 00:00:00 2001
From: Chris Burr <christopher.burr@cern.ch>
Date: Sun, 21 Mar 2021 22:23:31 +0100
Subject: [PATCH] Support standalone pyroot

---
 bindings/CMakeLists.txt         | 37 +++++++++++++++
 bindings/tpython/CMakeLists.txt | 79 ++++++++++++++++++++++++---------
 2 files changed, 95 insertions(+), 21 deletions(-)

diff --git a/bindings/CMakeLists.txt b/bindings/CMakeLists.txt
index 46989ba7dd..0d0a78dca2 100644
--- a/bindings/CMakeLists.txt
+++ b/bindings/CMakeLists.txt
@@ -3,6 +3,43 @@
 #
 # For the licensing terms see $ROOTSYS/LICENSE.
 # For the list of contributors see $ROOTSYS/README/CREDITS.
+if(standalone_pyroot)
+  project(PyROOTStandalone LANGUAGES CXX)
+
+  cmake_minimum_required(VERSION 3.19)
+
+  find_package(ROOT REQUIRED)
+  find_package(Python REQUIRED COMPONENTS Interpreter Development NumPy)
+  set(NUMPY_FOUND ${Python_NumPy_FOUND})
+  set(NUMPY_INCLUDE_DIRS "${Python_NumPy_INCLUDE_DIRS}" CACHE INTERNAL "" FORCE)
+
+  set(CMAKE_INSTALL_PYTHONDIR "${Python_SITEARCH}")
+  include(${CMAKE_SOURCE_DIR}/../cmake/modules/RootInstallDirs.cmake)
+
+  add_custom_target(move_headers ALL)
+  add_custom_target(copymodulemap)  # DEPENDS "${CMAKE_BINARY_DIR}/include/module.modulemap")
+  add_library(Core ALIAS ROOT::Core)
+  add_library(Tree ALIAS ROOT::Tree)
+  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
+  set(localruntimedir "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
+  set(python_executables "${Python_EXECUTABLE}")
+  set(python_version_strings "${Python_VERSION}")
+  set(python_major_version_strings "${Python_VERSION_MAJOR}")
+  set(python_under_version_strings "${Python_VERSION_MAJOR}_${Python_VERSION_MINOR}")
+  set(python_include_dirs "${Python_INCLUDE_DIRS}")
+  set(python_libraries "${Python_LIBRARIES}")
+  set(PYTHON_UNDER_VERSION_STRING_Development_Main "${Python_VERSION_MAJOR}_${Python_VERSION_MINOR}")
+
+  set(CMAKE_SKIP_BUILD_RPATH FALSE)         # don't skip the full RPATH for the build tree
+  set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) # use always the build RPATH for the build tree
+  set(CMAKE_MACOSX_RPATH TRUE)              # use RPATH for MacOSX
+  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE) # point to directories outside the build tree to the install RPATH
+
+  set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR} CACHE INTERNAL "") # install LIBDIR
+  set(CMAKE_SKIP_INSTALL_RPATH FALSE)          # don't skip the full RPATH for the install tree
+
+  set(pyroot ON)
+endif()
 
 if(pyroot)
   if ((MSVC AND NOT CMAKE_INSTALL_BINDIR STREQUAL CMAKE_INSTALL_PYTHONDIR) OR
diff --git a/bindings/tpython/CMakeLists.txt b/bindings/tpython/CMakeLists.txt
index 8544fec933..a7288be4bf 100644
--- a/bindings/tpython/CMakeLists.txt
+++ b/bindings/tpython/CMakeLists.txt
@@ -8,27 +8,64 @@
 # CMakeLists.txt file for building TPython
 ###########################################################
 
-ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTPython
-  HEADERS
-    TPyArg.h
-    TPyReturn.h
-    TPython.h
-  SOURCES
-    src/TPyArg.cxx
-    src/TPyClassGenerator.cxx
-    src/TPyReturn.cxx
-    src/TPython.cxx
-  DICTIONARY_OPTIONS
-    -writeEmptyRootPCM
-  DEPENDENCIES
-    Core
-  LIBRARIES
-    cppyy${PYTHON_UNDER_VERSION_STRING_Development_Main}
-    # We link libTPython against Python libraries to compensate for the fact that libcppyy
-    # is built with unresolved symbols. If we didn't do this, invoking TPython from C++
-    # would not work.
-    ${PYTHON_LIBRARIES_Development_Main}
-)
+if(standalone_pyroot)
+    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/inc)
+
+    ROOT_GENERATE_DICTIONARY(
+        G__ROOTTPython
+        TPyArg.h
+        TPyReturn.h
+        TPython.h
+        LINKDEF LinkDef.h
+    )
+    add_library(
+        ROOTTPython SHARED
+        src/TPyArg.cxx
+        src/TPyClassGenerator.cxx
+        src/TPyReturn.cxx
+        src/TPython.cxx
+        G__ROOTTPython.cxx
+    )
+    target_link_libraries(
+        ROOTTPython PUBLIC
+        ROOT::Core
+        cppyy${PYTHON_UNDER_VERSION_STRING_Development_Main}
+        ${PYTHON_LIBRARIES_Development_Main}
+    )
+    set_target_properties(
+        ROOTTPython PROPERTIES
+        PUBLIC_HEADER "inc/TPyArg.h;inc/TPyReturn.h;inc/TPython.h"
+    )
+    install(
+        TARGETS ROOTTPython
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries
+        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+    )
+else()
+    ROOT_STANDARD_LIBRARY_PACKAGE(ROOTTPython
+    HEADERS
+        TPyArg.h
+        TPyReturn.h
+        TPython.h
+    SOURCES
+        src/TPyArg.cxx
+        src/TPyClassGenerator.cxx
+        src/TPyReturn.cxx
+        src/TPython.cxx
+    DICTIONARY_OPTIONS
+        -writeEmptyRootPCM
+    DEPENDENCIES
+        Core
+    LIBRARIES
+        cppyy${PYTHON_UNDER_VERSION_STRING_Development_Main}
+        # We link libTPython against Python libraries to compensate for the fact that libcppyy
+        # is built with unresolved symbols. If we didn't do this, invoking TPython from C++
+        # would not work.
+        ${PYTHON_LIBRARIES_Development_Main}
+    )
+endif()
 
 # Disables warnings originating from deprecated register keyword in Python
 if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND CMAKE_CXX_STANDARD GREATER_EQUAL 11)
-- 
2.29.2

